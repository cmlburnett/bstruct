bstruct -- binary struct
This overlays a custom struct-like class over binary data to read/write from the binary data without an intermediate storage.
This can be used with a bytearray() or an mmap'ed file to directly modify binary data.

A class is declared using the metaclass "bstructmeta" and the class defines a dictionary named dat that defines the struct.

	import bstruct
	class foo(metaclass=bstruct.bstructmeta):
		dat = {
			'magic': bstruct.member_4(0),
			'length': bstruct.member_8(4),
		}

This creates a two-member struct that includs a 4-byte magic number and an 8-byte length number.
Use of the metaclass creates all of the properties and back-end work to manipulate the binary data.

	# Create a 20 byte null space
	b = bytearray(b'\0'*20)
	# Start struct at byte five
	f = foo(b, 5)

	f.magic.val = 42
	f.length.val = 2346298

	print(b.hex())

This outputs in hex:

	00000000002a0000003acd230000000000000000

Index with where struct members are found:
	00112233445566778899AABBCCDDEEFF00112233
	          | magic |   length   |

Note that 42 = 0x0000002A in little endian is 2a000000
and that 2346298 = 0x000000000023CD3A in little endian is 3acd230000000000

### Required Fields ###
The class requires use of the metaclass mentioned above.
The class also requires a dictionary named "dat" to contain a map from member names to the member types.
Optionally, a "conditional" dictionary can be used for polymorphism (see below).

The member types supported in the library include:
- member_1I -- 1 byte integer field
- member_2I -- 2 byte integer field
- member_4I -- 4 byte integer field
- member_8I -- 8 byte integer field
- member_1I_array -- 1 byte integer array
- member_2I_array -- 2 byte integer array
- member_4I_array -- 4 byte integer array
- member_8I_array -- 8 byte integer array
- member_4F_array -- 4 byte float array
- member_8F_array -- 8 byte float array
- member_binary -- arbitrary binary data field using item indices [] access
- member_binary_record -- arbitrary binary data field using item indices [] access assuming each record is the specified bytes long
- member_ref -- relative offset (currently a 2 byte field)
- member_str -- string encoded as UTF-8 can utilize member_ref or fixed integer offsets to determine start and end of the string
- member_jumptable -- a list of 2-tuples of member_ref fields indicating the start/end of list items
- member_list -- a list of arbitrary structs in a list
- member_substruct -- member is a sub-struct

Other member types can be defined outside of this library and used (recommend to inherit from bstruct.member).

### Member types ###
Members and their arguments:

	member_1I(offset) -- @offset is the offset of the start of the member relative to start of the struct
	member_2I(offset) -- same as member_1I
	member_4I(offset) -- same as member_1I
	member_8I(offset) -- same as member_1I
	member_ref(offset) -- same as member_1I
	member_1I_array(offset) -- same as member_1I with items accessed by array index
	member_2I_array(offset) -- same as member_1I with items accessed by array index
	member_4I_array(offset) -- same as member_1I with items accessed by array index
	member_8I_array(offset) -- same as member_1I with items accessed by array index
	member_4F_array(offset) -- same as member_1I with items accessed by array index
	member_8F_array(offset) -- same as member_1I with items accessed by array index
	member_binary(offset) -- same as member_I1
	member_binaryrecord(offset, size) -- @size of each record (eg, [0] == (0, size), [1] == (size,size*2))
	member_ref(offset) -- same as member_I1
	member_str(start, end) -- if @start or @end is an integer, it is a relative offset; otherwise take as a member name in which the value of that member (a member_ref) is used as the offset
	member_jumptable(offset, len, list) -- all are names of other members. @offset is the member indicating the start offset of the jumptable/list. @len is the member indicating the number of entries. @list is the member_list.
	member_list(item_class, jt_ref) -- @item_class is the class type for the entries (if polymorphic, supply the base struct). @jt_ref is the name of the jumptable member maanging the list.
	member_substruct(offset, class) -- this member is a sub-struct of type @class and @offset can be either integer or field name on the parent structure for offset information

Examples are probably the best way to understand how these structs are defined and used.

### Simple integer types ###
There are four integer types:

	member_1I
	member_2I
	member_4I
	member_8I

These represent 1, 2, 4, and 8 byte integers.

### Arrays ###
Arrays are simple sequantial items of integers.
Each member item is accessed (get and set) through item access.
Like other members, it assumes the space is managed by the calling user and does not move or make room for items.
Typically, the array member should also include a simple integer member to keep track of the count.
The space taken by the array is simply the item size times the number of items (no overhead), which is beneficial over jumptables.

### Polymorphism ###
Polymorphism is supported. In the following example, a person can be an employee or a volunteer.
Each has different properties encoded in the person.data binary field.
	import bstruct
	class person(metaclass=bstruct.bstructmeta):
		dat = {
			'type': bstruct.member_1I(0),
			'name': bstruct.member_str(1,16),
			'data': bstruct.member_binary(17),
		}
		conditional = {
			'type': {
				'E': employee,
				'V': volunteer,
			}
		}
		@staticmethod
		def lenplan(typ, **kargs):
			if typ == 'E':
				return employee.lenplan(**kargs)
			elif type == 'V':
				return volunteer.lenplan(**kargs)
			else:
				raise Exception
	class employee(metaclass=bstruct.bstructmeta):
		dat = {
			'type': bstruct.member_1I(0),
			'name': bstruct.member_str(1,16),
			'ID': bstruct.member_8I(17),
			'pay': bstruct.member_4I(25),
		}
		@staticmethod
		def lenplan():
			return 29
	class volunteer(metaclass=bstruct.bstructmeta):
		dat = {
			'type': bstruct.member_1I(0),
			'name': bstruct.member_str(1,16),
			'hours': bstruct.member_4I(17),
		}
		@staticmethod
		def lenplan():
			return 21

On an instance of a person struct, call condition_on(field) to get a polymorphed struct
		b = bytearray(b'\0'*50)
		p = person(b, 0)
		p.type.val = 'E'
		p = p.condition_on('type')
		p.name.val = 'Bob Ross'
		p.ID = 12

		b = bytearray(b'\0'*50)
		p = person(b, 0)
		p.type.val = 'V'
		p = p.condition_on('type')
		p.name.val = 'Bob Dole'
		p.hours.val = 1248

Note that both the person() instance and employee() instance access the exact same data and so they act more like a union.
Each can modify the available fields.

### Jumptables ###
A more advanced feature is a jumptable that is used to store 2-byte offsets (both start and end) of a list of structs.
	import bstruct
	class person(metaclass=bstruct.bstructmeta):
		dat = {
			'num_names': bstruct.member_1I(0),
			'index_names': bstruct.member_ref(1),
			'names_jumptable': bstruct.member_jumptable('index_names', 'num_names', 'names'),
			'names': bstruct.member_list(name, 'names_jumptable'),
		}
		@staticmethod
		def lenplan(names):
			return 3 + sum([name.lenplan(_) for _ in names])

	class name(metaclass=bstruct.bstructmeta):
		dat = {
			'first': bstruct.member_str(0, 20),
			'last': bstruct.member_str(20, 40),
		}
		@staticmethod
		def lenplan():
			return 40

This creates a struct that contains a jumptable linked to a list of name structs, where each name struct is 40 bytes of a name.
The name struct need not be of fixed size, nor do they need to be byte-wise contiguous as each entry in the jumptable contains a start and end offset.
Arguments to member_jumptable are the members that contain the offset start of the jumptable (index_names), the number of entries (num_names), and the list itself (names).

While it is not required that list items are sequential, it is entirely possible to rearrange them within the jumptable.
If you go this route it is up to you to deal with that.
member_jumptable.add() and member_list.add() assume the new item is sequential to the last item in the list.


### Sub-structs ###
A way to sub-divide a struct using other struct definitions.
This can help logically split up a struct for any reason but can be for when only a subset of the fields are polymorphic.

For example:

	class names(metaclass=bstruct.bstructmeta):
		dat = {
			'num_names': bstruct.member_1I(0),
			'index_names': bstruct.member_ref(1),
			'names_jumptable': bstruct.member_jumptable('index_names', 'num_names', 'names'),
			'names': bstruct.member_list(name, 'names_jumptable'),
		}
		@staticmethod
		def lenplan(names):
			return 3 + sum([name.lenplan(_) for _ in names])

	class name(metaclass=bstruct.bstructmeta):
		dat = {
			'first': bstruct.member_str(0, 20),
			'last': bstruct.member_str(20, 40),
		}
		@staticmethod
		def lenplan():
			return 40

	class person(metaclass=bstruct.bstructmeta):
		dat = {
			'names': bstruct.member_substruct(0, names),
		}
	class employer(metaclass=bstruct.bstructmeta):
		dat = {
			'employee_id': bstruct.member_4I(0),
			'names': bstruct.member_substruct(4, names),
		}


### Unit Testing ###
Some basic unit testing is included.

	python setup.py test

All should pass, of course.

### Installing ###
Easy:

	python setup.py install

Or

	sudo python setup.py install

